AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-genai-rag-prototype

  SAM Template for sam-genai-rag-prototype

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900  # allow for maximal timeout of 15 minutes (needed to process multiple PDF docs during a single lambda invocation)
    MemorySize: 256 # increased from 128 to try to address issue with running Anthropic model in conversation mode
    Environment:
      Variables:
        DEFAULT_PINECONE_API_KEY: "4995b4bc-bb2d-4dfe-8bb3-992a10ea9854"
        DEFAULT_PINECONE_ENVIRONMENT: "gcp-starter"
        DEFAULT_PINECONE_INDEX_NAME: "agda-knowledge-base"
        DEFAULT_PINECONE_METRIC: "dotproduct"
        DEFAULT_MODEL_ID: 'anthropic.claude-instant-v1'
        DEFAULT_EMBEDDINGS_MODEL_ID: "amazon.titan-embed-text-v1"
        FIRST_DOCUMENT_SETS_EMBEDDING_DIMENSION: True  # the first doc to be processed will be used to create the Pincone index with an appropriate embedding dimension (i.e., "JIT" initialization)
        DEFAULT_EMBEDDING_DIMENSION: 1536   # hardcodedembedding vector dimensionality; will be used if 'FIRST_DOC_SET_EMBEDDING_DIMENSION' = False
        DEFAULT_MAX_TOKEN_LIMIT: 1000


Parameters:
  APIStageName:
    Default: api
    Description: StageName of API Gateway deployment
    Type: String
  CognitoUserEmail:
    Description: Email address of the created user
    Type: String


Resources:
            
  Boto3Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: boto3-layer
      Description: "AWS Lambda Layer / latest boto3 version functionality"
      ContentUri: boto3-layer/
      CompatibleRuntimes:
        - python3.7
        - python3.8
        - python3.9
        
  LibsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: libs-layer
      Description: "AWS Lambda Layer / various external librariesfunctionality"
      ContentUri: libs-layer/
      CompatibleRuntimes:
        - python3.8
        - python3.9
        
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: utils-layer
      Description: "AWS Lambda Layer / shared utility functionality"
      ContentUri: utils-layer/
      CompatibleRuntimes:
        - python3.7
        - python3.8
        - python3.9
        
  LandingZoneBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled

  LandingZoneBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref LandingZoneBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: '*'
            Effect: Allow
            Resource:
              - !GetAtt LandingZoneBucket.Arn
              - !Sub
                  - '${varLandingZoneBucketArn}/*'
                  - varLandingZoneBucketArn: !GetAtt LandingZoneBucket.Arn
            Principal:
              AWS: '*'

  LandigZoneBucketAccessPoint:
    Type: 'AWS::S3::AccessPoint'
    Properties:
      Bucket: !Ref LandingZoneBucket
      Name: 'ingest-access-point'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      
  BootstrapFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: bootstrap/
      Handler: invoke.lambda_handler
      Runtime: python3.8
      Layers:
        - !Ref UtilsLayer
        - !Ref LibsLayer
      Events:
        QA:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bootstrap
            Method: get
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: CognitoAuthorizer

  DataIngestFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: data_ingest/
      Handler: invoke.lambda_handler
      Runtime: python3.8
      Layers:
        - !Ref Boto3Layer
        - !Ref UtilsLayer
        - !Ref LibsLayer
      Events:
        FileUpLoad:
          Type: S3
          Properties:
            Bucket: !Ref LandingZoneBucket
            Events: s3:ObjectCreated:*
            
  QAFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: qa/
      Handler: invoke.lambda_handler
      Runtime: python3.8
      Layers:
        - !Ref Boto3Layer
        - !Ref UtilsLayer
        - !Ref LibsLayer
      Events:
        QAGET:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /qa
            Method: get
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: CognitoAuthorizer
        QAPOST:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /qa
            Method: post
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: CognitoAuthorizer

  AppApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: GenAIPrototypeAPI
      StageName: !Ref APIStageName
      Cors: "'*'"
      Auth:
        Authorizers:
            CognitoAuthorizer:
              UserPoolArn: !GetAtt "UserPool.Arn"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyUserPool
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
  UserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: !Ref CognitoUserEmail
      UserPoolId: !Ref UserPool


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  BootstrapApi:
    Description: "API Gateway endpoint URL for Prod stage for Bootstrap function ((re-)initialize Pinecone index)"
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/bootstrap/"
  BootstrapFunction:
    Description: "Bootstrap Lambda Function ARN"
    Value: !GetAtt BootstrapFunction.Arn
  BootstrapFunctionIamRole:
    Description: "Implicit IAM Role created for Bootstrap function"
    Value: !GetAtt BootstrapFunctionRole.Arn
    
  QAApi:
    Description: "API Gateway endpoint URL for Prod stage for Q&A function"
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/qa/"
  QAFunction:
    Description: "Q&A Lambda Function ARN"
    Value: !GetAtt QAFunction.Arn
  QAFunctionIamRole:
    Description: "Implicit IAM Role created for Q&A function"
    Value: !GetAtt QAFunctionRole.Arn

  LandingZoneBucketName:
    Description: "name of S3 bucket used as a file landing zone"
    Value: !Ref LandingZoneBucket
  LandigZoneBucketAccessPoint:
    Description: "Arn of the landing zone bucket's access point"
    Value: !GetAtt LandigZoneBucketAccessPoint.Arn
    
  DataIngestFunction:
    Description: "Data Ingest Lambda Function ARN"
    Value: !GetAtt DataIngestFunction.Arn
  DataIngestFunctionIamRole:
    Description: "Implicit IAM Role created for Data Ingest function"
    Value: !GetAtt DataIngestFunctionRole.Arn

  CognitoUserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref UserPool
  CognitoClientId:
    Description: "ID of the Cognito User Pool Client"
    Value: !Ref UserPoolClient
    